#!/usr/bin/env python
# Version: 1.1
# -*- coding: utf-8 -*-

import sys
import os
import json
from subprocess import call


def assert_step(r):
    if r is not 0:
        sys.stdout.write('> Something went wrong, aborting...\n')
        sys.stdout.write('> Revision not deployed\n')
        sys.exit(1)


def main(argv):
    if len(argv) is 1:
        sys.stdout.write('> Missing revision code; skipping\n')
        sys.stdout.write('> Revision not deployed\n')
        sys.exit(0)
    deployment_options_filepath = os.path.join(
        os.getcwd(), '.deployment.json')
    if not os.path.isfile(deployment_options_filepath):
        sys.stdout.write('> Missing deployment file; skipping\n')
        sys.stdout.write('> Revision not deployed\n')
        sys.exit(0)
    deployment_options_file = open(deployment_options_filepath)
    try:
        deployment_options = json.load(deployment_options_file)
    except:
        sys.stdout.write('> Problem reading the deployment file; skipping\n')
        sys.stdout.write('> Revision not deployed\n')
        sys.exit(0)
    exposed_port = deployment_options.get('exposed_port', 8080)
    baseport = deployment_options.get('baseport', 3000)
    number_of_instances = deployment_options.get('number_of_instances', 1)
    number_of_instances = number_of_instances if number_of_instances > 0 else 1
    env = deployment_options.get('env', dict())
    for key, value in env.items():
        os.environ[key] = value
    project = os.path.basename(os.getcwd())
    docker = 'sudo docker' if os.environ['USER'] == 'projects' else 'docker'
    oldrev = argv[1][:7]
    newrev = argv[2][:7]
    old_image_label = '{}-{}'.format(project, oldrev)
    new_image_label = '{}-{}'.format(project, newrev)

    ##
    # Run the pre-deployment script
    pre_deployment_script_filepath = os.path.join(
        os.getcwd(), 'bin', 'pre-deploy')
    print(pre_deployment_script_filepath)
    if os.path.isfile(pre_deployment_script_filepath):
        sys.stdout.write('> Pre-deployment script found; executing it\n')
        command = 'bin/pre-deploy'
        print('> ' + command)
        sys.stdout.flush()
        r = call(command, shell=True)
        assert_step(r)

    sys.stdout.write('> Starting to deploy revision {}\n'.format(newrev))
    # Build image
    sys.stdout.write('> Starting to build image {}\n'.format(new_image_label))
    command = '{} build -t {} .'.format(docker, new_image_label)
    print('> ' + command)
    sys.stdout.flush()
    r = call(command, shell=True)
    assert_step(r)
    # Replace each container/port
    sys.stdout.write('> Replacing containers\n')
    for i in range(number_of_instances):
        port = baseport + i
        new_container_label = '{}-p{}'.format(new_image_label, port)
        old_container_label = '{}-p{}'.format(old_image_label, port)
        sys.stdout.write('> Replacing container {} for {}\n'.format(
            old_container_label, new_container_label))
        ##
        # The following command may fail
        command = '{} stop {}'.format(docker, old_container_label)
        print('> ' + command)
        sys.stdout.flush()
        r = call(command, shell=True)
        ##
        # The following command may fail
        command = '{} rm {}'.format(docker, old_container_label)
        print('> ' + command)
        sys.stdout.flush()
        r = call(command, shell=True)
        command = '{} run --restart=always --name {} -p {}:{} -d {}'.format(
            docker, new_container_label, port, exposed_port, new_image_label)
        print('> ' + command)
        sys.stdout.flush()
        r = call(command, shell=True)
        assert_step(r)
    ##
    # The following command may fail
    # Remove old image
    sys.stdout.write('> Remove previous image {}\n'.format(old_image_label))
    command = '{} rmi {}'.format(docker, old_image_label)
    print('> ' + command)
    sys.stdout.flush()
    r = call(command, shell=True)
    sys.stdout.write('> Revision {} deployed successfully\n'.format(newrev))

    ##
    # Run the post-deployment script
    pre_deployment_script_filepath = os.path.join(
        os.getcwd(), 'bin', 'post-deploy')
    if os.path.isfile(pre_deployment_script_filepath):
        sys.stdout.write('> Post-deployment script found; executing it\n')
        command = 'bin/post-deploy'
        print('> ' + command)
        sys.stdout.flush()
        r = call(command, shell=True)
        assert_step(r)


if __name__ == '__main__':
    main(sys.argv)
